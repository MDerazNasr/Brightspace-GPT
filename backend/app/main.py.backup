# backend/app/main.py
"""
uOttawa Brightspace LLM Assistant - Main Application
"""
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware

# Import configuration
try:
    from app.core.config import settings
except ImportError:
    class Settings:
        DEBUG = True
        CORS_ORIGINS = ["http://localhost:3000"]
        ENVIRONMENT = "development"
    settings = Settings()

# Import database init
try:
    from app.core.database import init_db
except ImportError:
    async def init_db():
        print("Database initialization skipped - module not found")
        pass

# Import API routers
try:
    from app.api import health
except ImportError:
    health = None

try:
    from app.api import auth
except ImportError:
    auth = None

try:
    from app.api import extension
except ImportError:
    extension = None

# CREATE THE APP FIRST - This is the key fix!
app = FastAPI(
    title="uOttawa Brightspace Assistant",
    description="AI-powered assistant for uOttawa Brightspace courses",
    version="1.0.0",
    docs_url="/docs" if getattr(settings, 'DEBUG', True) else None,
    redoc_url="/redoc" if getattr(settings, 'DEBUG', True) else None,
)

# Add security middleware
app.add_middleware(
    TrustedHostMiddleware, 
    allowed_hosts=["localhost", "127.0.0.1", "assistant.uottawa.ca", "*"]
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=getattr(settings, 'CORS_ORIGINS', ["*"]),
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

# NOW include routers (after app is created)
if health:
    app.include_router(health.router, prefix="/api/health", tags=["Health"])
    print("✅ Included health router")

if auth:
    app.include_router(auth.router, prefix="/api/auth", tags=["Authentication"])
    print("✅ Included auth router")

if extension:
    app.include_router(extension.router, prefix="/api/extension", tags=["Extension"])
    print("✅ Included extension router")

@app.on_event("startup")
async def startup_event():
    """Initialize application on startup."""
    try:
        await init_db()
        print("✅ Database initialized")
    except Exception as e:
        print(f"⚠️ Database initialization failed: {e}")

@app.on_event("shutdown")
async def shutdown_event():
    """Cleanup on application shutdown."""
    pass

@app.get("/")
async def root():
    """Root endpoint."""
    return {
        "message": "uOttawa Brightspace LLM Assistant API",
        "version": "1.0.0",
        "status": "running",
        "environment": getattr(settings, 'ENVIRONMENT', 'unknown')
    }

@app.get("/test")
async def test_endpoint():
    """Simple test endpoint."""
    return {"test": "success", "message": "API is working!"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8001,
        reload=getattr(settings, 'DEBUG', True)
    )